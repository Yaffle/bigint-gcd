(module
  (func (export "helper") (param $x i64) (param $xlo i64) (param $y i64) (param $ylo i64) (param $lobits i64) (result i64 i64 i64 i64)
    (local $A i64)
    (local $B i64)
    (local $C i64)
    (local $D i64)
    (local $i i32)
    (local $q i64)
    (local $y1 i64)
    (local $A1 i64)
    (local $B1 i64)
    (local $C1 i64)
    (local $D1 i64)
    (local $sameQuotient i32)
    (local $xPlusMaxABclz i64)
    (local $yPlusMaxCDclz i64)
    (local $bits i64)
    (local $xlo1 i64)
    (local $ylo1 i64)
    (local.set $A (i64.const 1))
    (local.set $B (i64.const 0))
    (local.set $C (i64.const 0))
    (local.set $D (i64.const 1))
    (local.set $i (i32.const 4))
    (loop $loop1

      (local.set $A1 (local.get $A))
      (local.set $B1 (local.get $B))
      (local.set $C1 (local.get $C))
      (local.set $D1 (local.get $D))
      (local.set $y1 (local.get $y))
      (local.set $y (local.get $x))

      (loop $loop2
        (local.set $x (local.get $y))
        (local.set $y (local.get $y1))
        (local.set $A (local.get $A1))
        (local.set $B (local.get $B1))
        (local.set $C (local.get $C1))
        (local.set $D (local.get $D1))
        (local.set $q (i64.div_s (local.get $x) (local.get $y)))
        (local.set $y1 (i64.rem_s (local.get $x) (local.get $y)))
        (local.set $A1 (local.get $C))
        (local.set $B1 (local.get $D))
        (local.set $C1 (i64.sub (local.get $A) (i64.mul (local.get $q) (local.get $C))))
        (local.set $D1 (i64.sub (local.get $B) (i64.mul (local.get $q) (local.get $D))))
        (local.set $sameQuotient
          (i32.and
            (i32.and
              (i64.ge_s (i64.add (i64.clz (select (i64.sub (i64.const 0) (local.get $C)) (local.get $C) (i64.lt_s (local.get $C) (i64.const 0)))) (i64.clz (local.get $q))) (i64.const 66))
              (i64.ge_s (i64.add (i64.clz (select (i64.sub (i64.const 0) (local.get $D)) (local.get $D) (i64.lt_s (local.get $D) (i64.const 0)))) (i64.clz (local.get $q))) (i64.const 66))
            )
            (i32.and
              (i32.and
                (i64.le_s (i64.const 0) (i64.add (local.get $y1) (local.get $C1)))
                (i64.lt_s (i64.add (local.get $y1) (local.get $C1)) (i64.add (local.get $y) (local.get $C)))
              )
              (i32.and
                (i64.le_s (i64.const 0) (i64.add (local.get $y1) (local.get $D1)))
                (i64.lt_s (i64.add (local.get $y1) (local.get $D1)) (i64.add (local.get $y) (local.get $D)))
              )
            )
          )
        )
        (br_if $loop2 (i32.ne (local.get $sameQuotient) (i32.const 0)))
      )
      (local.set $xPlusMaxABclz (i64.clz (i64.add (local.get $x) (select (local.get $A) (local.get $B) (i64.gt_s (local.get $A) (local.get $B))))))
      (local.set $yPlusMaxCDclz (i64.clz (i64.add (local.get $y) (select (local.get $C) (local.get $D) (i64.gt_s (local.get $C) (local.get $D))))))
      (local.set $bits (select (local.get $xPlusMaxABclz) (local.get $yPlusMaxCDclz) (i64.lt_s (local.get $xPlusMaxABclz) (local.get $yPlusMaxCDclz))))
      (local.set $bits (i64.sub (local.get $bits) (i64.const 1)))
      (local.set $bits (select (local.get $bits) (i64.const 0) (i64.gt_s (local.get $bits) (i64.const 0))))
      (local.set $bits (select (local.get $lobits) (local.get $bits) (i64.gt_s (local.get $bits) (local.get $lobits))))

      (local.set $lobits (i64.sub (local.get $lobits) (local.get $bits)))
      (local.set $xlo1 (i64.shr_s (local.get $xlo) (local.get $lobits)))
      (local.set $ylo1 (i64.shr_s (local.get $ylo) (local.get $lobits)))
      (local.set $xlo (i64.sub (local.get $xlo) (i64.shl (local.get $xlo1) (local.get $lobits))))
      (local.set $ylo (i64.sub (local.get $ylo) (i64.shl (local.get $ylo1) (local.get $lobits))))

      (local.set $x 
         (i64.add
           (i64.add
             (i64.mul (local.get $A) (local.get $xlo1))
             (i64.mul (local.get $B) (local.get $ylo1))
           )
           (i64.shl (local.get $x) (local.get $bits))
         )
       )
      (local.set $y 
         (i64.add
           (i64.add
             (i64.mul (local.get $C) (local.get $xlo1))
             (i64.mul (local.get $D) (local.get $ylo1))
           )
           (i64.shl (local.get $y) (local.get $bits))
         )
       )

      (local.set $i (i32.sub (local.get $i) (i32.const 1)))
      (br_if $loop1 (i32.ne (local.get $i) (i32.const 0)))
    )
    (local.get $A)
    (local.get $B)
    (local.get $C)
    (local.get $D)
  )
)
